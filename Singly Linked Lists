#include <stdio.h>
#include <stdlib.h>

//The Program to perform the basic fucntion of Linked List
//@author-Swapnil Chatterjee
//date-10/08/2023

struct node {//declaring a node with 2 parts(Data and Link)
    int data;
    struct node *link;
};

struct node *head = NULL;

//the method to display the Linked List
void display(struct node *ptr) {
    while (ptr != NULL) {
        printf("%d ", ptr->data);
        ptr = ptr->link;
    }
    printf("\n");
}

//The function to insert a node at the begining of the Linked list
void insertbeg(int x) {
    struct node *newnode = (struct node*) malloc(sizeof(struct node));
    
    newnode->data = x;
    newnode->link = head;
    
    head = newnode;
}

//the function to insert a node at the end of the Linked list
void insertend(int x) {
    struct node *newnode = (struct node*) malloc(sizeof(struct node));
    newnode->data = x;
    newnode->link = NULL;
    
    if (head == NULL) {
        head = newnode;
        return;
    }
    
    struct node *temp = head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    
    temp->link = newnode;
}

//The function to delete a node from the begining of Linked List 
void deletebeg() {
    if (head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return;
    }
    
    struct node *temp = head;
    head = head->link;
    free(temp);
}

//The function to delete a node from the end of Linked List
void deletend() {
    if (head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return;
    }
    
    struct node *temp = head;
    struct node *prevnode = NULL;
    
    while (temp->link != NULL) {
        prevnode = temp;
        temp = temp->link;
    }
    
    if (prevnode != NULL) {
        prevnode->link = NULL;
    } else {
        head = NULL;
    }
    
    free(temp);
}

//the function to search for a element in the list
int search(int x, struct node *ptr) {
    while (ptr != NULL) {
        if (ptr->data == x) {
            printf("Item Found\n");
            return 1; 
        }
        ptr = ptr->link;
    }
    
    printf("Item Not found\n");
    return 0; 
}

//The function to insert element at any position
void insertanypos(int x, int pos){
    struct node *newnode = (struct node*) malloc(sizeof(struct node));
    newnode->data = x;
    
    if (pos == 1) {
        newnode->link = head;
        head = newnode;
        return;
    }

    struct node *temp = head;
    for (int i = 1; i < pos - 1 && temp != NULL; i++) {
        temp = temp->link;
    }

    if (temp == NULL) {
        printf("Invalid position\n");
        free(newnode);
        return;
    }

    newnode->link = temp->link;
    temp->link = newnode;
}


int main() {
    int ch, a;
    while (1) {
        printf("Press 1 to insert elements at beginning\n");
        printf("Press 2 to insert elements at end\n");
        printf("Press 3 to insert elements at any position\n");
        printf("Press 4 to display elements\n");
        printf("Press 5 to delete from beginning\n");
        printf("Press 6 to delete from ending\n");
        printf("Press 7 to search an element\n");
        printf("Press 0 to exit\n");
        printf("Enter choice: ");
        scanf("%d", &ch);
        
        switch (ch) {
            case 1:
                printf("Enter element to be inserted: ");
                scanf("%d", &a);
                insertbeg(a);
                break;
                
            case 2:
                printf("Enter element to be inserted: ");
                scanf("%d", &a);
                insertend(a);
                break;
                
            case 3:
                int pos;
                printf("Enter element to be inserted: ");
                scanf("%d", &a);
                printf("Enter postion: ");
                scanf("%d", &pos);
                insertanypos(a,pos);
                printf("After insertion--");
                display(head);
                
            case 4:
                printf("The elements are: ");
                display(head);
                break;
                
            case 5:
                printf("After deletion: ");
                deletebeg();
                display(head);
                break;
                
            case 6:
                printf("After deletion: ");
                deletend();
                display(head);
                break;
                
            case 7:
                printf("Enter element: ");
                scanf("%d", &a);
                search(a, head);
                break;
                
            case 0:
                printf("Thank You!\n");
                exit(0);
                break;
                
            default:
                printf("Wrong choice\n");
                break;
        }
    }
    
    return 0;
}
